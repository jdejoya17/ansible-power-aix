---
#######################################
# Setup Tasks
#######################################
- name: "SETUP: Gather LVM facts"
  lvm_facts:
    name: all
    component: all
  register: facts

- name: "SETUP: Show LVM facts"
  debug:
    var: facts

- name: "SETUP: create a volume group"
  lvg:
    state: present
    vg_name: "{{ vg_name }}"
    pvs: "{{ pv_list }}"
    force: true
  when:
  - facts.ansible_facts.LVM.VGs.{{ vg_name }} is not defined

- name: "SETUP: create a logical volume for the server filesystem"
  lvol:
    state: present
    vg: "{{ vg_name }}"
    lv: "{{ nfs_lv_name }}"
    size: "{{ lv_size }}"
    lv_type: "{{ lv_type }}"
  register: results
  when:
  - facts.ansible_facts.LVM.LVs.{{ nfs_lv_name }} is not defined

- name: "SETUP: create server filesystem"
  filesystem:
    state: present
    filesystem: "{{ nfs_serv }}"
    fs_type: "{{ fs_type }}"
    device: "{{ nfs_lv_name }}"
    mount_group: "{{ mnt_grp }}"
  register: results
  when:
  - results is changed or facts.ansible_facts.LVM.LVs.{{ nfs_lv_name }}.mount_point != "{{ nfs_serv }}"

- name: "SETUP: mount server filesystem"
  mount:
    state: mount
    mount_dir: "{{ nfs_serv }}"
  when:
  - results is changed or facts.ansible_facts.LVM.LVs.{{ nfs_lv_name }}.lv_state == "closed/syncd" 

- name: "SETUP: check entries in /etc/exports"
  shell: cat /etc/exports || touch /etc/exports
  register: results

# Setup for NFS mount
- name: "SETUP: add backing filesystem to /etc/exports"
  shell: echo "{{ nfs_serv }} -anon=0" >> /etc/exports
  register: results
  when: results.stdout.find( "{{ nfs_serv }}" ) == -1

# stop all nfs daemons/services
- name: "SETUP: stop all NFS daemons/services"
  shell: /etc/nfs.clean
  register: results
  when: 
  - results is not skipped
  - results.rc == 0

- name: "SETUP: restart NFS daemons/services"
  shell: /etc/rc.nfs
  register: results
  when:
  - results is not skipped
  - results.rc == 0

- name: "SETUP: exportfs"
  shell: exportfs
  register: results
  when:
  - results is not skipped
  - results.rc == 0

- name: "SETUP: fetch hostname"
  shell: hostname
  register: results

- name: "SETUP: Check for first run"
  shell: ls /tmp/first_run_done || echo "mount NFS"
  register: nextrun

- name: "SETUP: Mount NFS"
  mount:
   state: mount
   node: "{{ results.stdout }}"
   mount_dir: "{{ nfs_serv }}"
   mount_over_dir: "{{ nfs_client }}"
  when: nextrun.stdout.find( "mount NFS" ) != -1

#######################################
# Actual Task To Be Tested
#######################################
- name: "TEST1: umount NFS"
  mount:
    state: umount
    mount_dir: "{{ nfs_client }}"
  register: results

- name: "TEST_RESULT: show results"
  debug:
    var: results

- name: "TEST_ASSERT_RUN1: expected results - first run"
  assert:
    that:
    - results.msg.find( "Unmount successful" ) != -1
    - results.cmd.find( "{{ nfs_client }}" ) != -1
  when:
  - results is changed

- name: "SETUP: make sure to not mount NFS again on second run"
  shell: touch /tmp/first_run_done
  when:
  - results is changed

- name: "TEST_ASSERT_RUN2: expected results -second run"
  assert:
    that:
    - results.msg.find( "not mounted" ) != -1
    - results.msg.find( "{{ nfs_client }}" ) != -1
  when:
  - results is not changed

- name: "SETUP: make sure to reset env variables"
  shell: rm /tmp/first_run_done || echo "nothing to reset"
  when:
  - results is not changed
