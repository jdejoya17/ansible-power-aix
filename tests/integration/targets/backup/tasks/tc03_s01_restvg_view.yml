---
##################################
# Setup Tasks
##################################
- name: "SETUP: Gather LVM facts"
  lvm_facts:
    name: all
    component: all
  register: facts
- debug: var=facts

- name: "SETUP: create a volume group"
  lvg:
    state: present
    vg_name: "{{ vg_name }}"
    pvs: "{{ pv_list }}"
    force: "{{ force }}"
  when:
  - facts.ansible_facts.LVM.VGs.{{ vg_name }} is not defined

- name: "SETUP: create logical volume"
  lvol:
    state: present
    vg: "{{ vg_name }}"
    lv: "{{ lv_name }}"
    lv_type: "{{ lv_type }}"
    size: "{{ lv_size }}"
  register: results
  when:
  - facts.ansible_facts.LVM.LVs.{{ lv_name }} is not defined

- name: "SETUP: create filesystem"
  filesystem:
    state: present
    filesystem: "{{ fs_mnt }}"
    fs_type: "{{ fs_type }}"
    device: "{{ lv_name }}"
  when:
  - results is changed or facts.ansible_facts.LVM.LVs.{{ lv_name }}.mount_point != "{{ fs_mnt }}"

- name: "SETUP: check if filesystem is mounted"
  command: df
  register: results

- name: "SETUP: mount filesystem"
  mount:
    state: mount
    mount_dir: "{{ fs_mnt }}"
  when:
  - results.stdout.find( "{{ fs_mnt }}" ) == -1

- name: "SETUP: check if file exists"
  shell: ls "{{ filepath }}" || echo "create file"
  register: results

- name: "SETUP: create file in mounted filesystem"
  command: touch "{{ filepath }}"
  when:
  - results.stdout.find( "create file" ) != -1

- name: "SETUP: check if file exists"
  shell: ls "{{ backup_location }}" || echo "create backup"
  register: results

- name: "TEST1: savevg to create a vg backup image"
  backup:
    action: create
    type: "{{ type }}"
    name: "{{ vg_name }}"
    location: "{{ backup_location }}"
    exclude_data: "{{ exclude_data }}"
    create_data_file: "{{ create_data_file }}"
    extend_fs: "{{ extend_fs }}"
  register: results
  when:
  - results.stdout.find( "create backup" ) != -1

##################################
# Actual Tasks To Be Tested
##################################
- name: "TEST1: view the savevg image"
  backup:
    action: view
    type: "{{ type }}"
    location: "{{ backup_location }}"
  register: results
- debug: var=results

- name: "TEST_ASSERT_RUN: expected results"
  assert:
    that:
    - results is not changed
    - results.msg.find( "AIX view backup operation successful" ) != -1
    - results.cmd.find( "restvg" ) != -1
    - results.cmd.find( "{{ backup_location }}" ) != -1
